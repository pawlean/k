# This will run the standard kubectl completion script
#. <(kubectl completion zsh | sed 's/kubectl/k/g')

#compdef __k_handle_word k

__k_kspace_parse_config() {
    local template k_out lead_char

    # There's probably a beter way to keep the + or @ after tab completion
    case $1 in
    contexts )
        lead_char='+' ;;
    clusters )
        lead_char='@' ;;
    esac

    # Use lead_char in output so each variable has it
    template="{{ range .$1  }}{{ .name }} {{ end }}"

    # ${cur##*,} removes everything up to and including ,
    # we call k so that KUBECONFIG will be properly set
    # we don't need ${cur%%:*} because we're looking up clusters and contexts
    if k_out=$(k config view -o template --template="${template}"); then
        compadd -X "${1:u}" -P "$lead_char" -S '' $( echo "${k_out[*]}" )
        # use this so we don't have a space after the cluster/context
        # in case we want to add :namespace
    fi
}

__k_kspace_parse_get() {
    local template
    template="{{ range .items  }}{{ .metadata.name }} {{ end }}"
    local -a k_out compreply
    #set -x
    # Creates an array of current used namespaces to delete later from
    # tab completed options
    # ${(z)cur} returns array syntax (splits on space)
    # Read more in http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
    # ${cur#*:} removes everything before (and including) :
    # ${cur:gs/,/ } replaces commas with spaces
    local rmnamespaces=("${(z)${cur#*:}:gs/,/ }")

    if k_out=($(k ${cur%%:*} get -o template --template="${template}" namespace)); then
        # this is zsh magic that subtracts rmnamespaces from k_out array
        compreply=("${(@)k_out:|rmnamespaces}")
        # -X add NAMESPACES header
        # ${cur%${1}*}${1} remove everything from cur up to and including ${1}
        # but add the passed character back because we want it on the line
        # ${1} will be a : or , depending on if we're declaring the first
        # namespace or multiple (eg :namespace,default,kube-system}
        # -p tells compadd to treat it as a "hidden-prefix" so completion
        # options don't include it.
        # -S '' means no space will be included after tab (adds suffix)
        # -a uses values from the compreply array
        compadd -X "NAMESPACES" -p "${cur%${1}*}${1}" -S '' -a compreply
    #set +x
    fi
}

__k_kspace_parse_config_contexts() {
    __k_kspace_parse_config "contexts"
}
__k_kspace_parse_config_clusters() {
    __k_kspace_parse_config "clusters"
}
__k_kspace_get_resource_namespace()
{
    __k_kspace_parse_get "${1}"
}

__k_handle_kspace() {

    #set -x
    cur="${words[$CURRENT]}"

    # try to find a pattern match for the current argument
    case $cur in
    # start with most specific matches and go toward general matches
    # because case is processed in order
    :*,* | *:*,* )
        # This will match for multiple namespaces
        __k_kspace_get_resource_namespace ','
        # add the prefix back to the matched value
        # ${COMPREPLY[@]/#/prefix} will add the current line back to each
        # element in the COMPREPLY array
        # Using ${prefix#*:} removes everything before the : so we make
        # sure we only add the namespaces because : is considered a new arg
        # even though everything before it is part of $cur
        #compadd $( echo "${COMPREPLY[@]/#/${prefix#*:}}" )
        ;;
    :* )
        # This matches for standalone :namespace
        __k_kspace_get_resource_namespace ':'
        ;;
    *:* )
        # This matches for +context:namespace or @cluster:namespace
        # If current word has a comma then save everything up to the comma
        # as prefix
        __k_kspace_get_resource_namespace ':'
        #compadd -P $prefix $( echo "${COMPREPLY[@]}" )
        ;;
    +* )
        # This will match contexts without namespaces
        __k_kspace_parse_config_contexts
        ;;
    @* )
        # This will match clusters without namespaces
        __k_kspace_parse_config_clusters
        ;;
    * )
        # Don't do anything for arguments not in this list
        ;;
    esac
    #set +x

}

# re-declare _k_root_command to override the default
# from kubectl completion bash
_k_root_command()
{
    last_command="k"

    command_aliases=()

    commands=()
    commands+=("alpha")
    commands+=("annotate")
    commands+=("api-resources")
    commands+=("api-versions")
    commands+=("apply")
    commands+=("attach")
    commands+=("auth")
    commands+=("autoscale")
    commands+=("certificate")
    commands+=("cluster-info")
    commands+=("completion")
    commands+=("config")
    commands+=("convert")
    commands+=("cordon")
    commands+=("cp")
    commands+=("create")
    commands+=("delete")
    commands+=("describe")
    commands+=("diff")
    commands+=("drain")
    commands+=("edit")
    commands+=("exec")
    commands+=("explain")
    commands+=("expose")
    commands+=("get")
    commands+=("kustomize")
    commands+=("label")
    commands+=("logs")
    commands+=("options")
    commands+=("patch")
    commands+=("plugin")
    commands+=("port-forward")
    commands+=("proxy")
    commands+=("replace")
    commands+=("rollout")
    commands+=("run")
    commands+=("scale")
    commands+=("set")
    commands+=("taint")
    commands+=("top")
    commands+=("uncordon")
    commands+=("version")
    commands+=("wait")
    # Need to add our kspace options here
    commands+=("@")
    commands+=("+")
    commands+=(":")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--add-dir-header")
    flags+=("--alsologtostderr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cache-dir=")
    two_word_flags+=("--cache-dir")
    flags+=("--certificate-authority=")
    two_word_flags+=("--certificate-authority")
    flags+=("--client-certificate=")
    two_word_flags+=("--client-certificate")
    flags+=("--client-key=")
    two_word_flags+=("--client-key")
    flags+=("--cluster=")
    two_word_flags+=("--cluster")
    flags_with_completion+=("--cluster")
    flags_completion+=("__k_config_get_clusters")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__k_config_get_contexts")
    flags+=("--insecure-skip-tls-verify")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--log-backtrace-at=")
    two_word_flags+=("--log-backtrace-at")
    flags+=("--log-dir=")
    two_word_flags+=("--log-dir")
    flags+=("--log-file=")
    two_word_flags+=("--log-file")
    flags+=("--log-file-max-size=")
    two_word_flags+=("--log-file-max-size")
    flags+=("--log-flush-frequency=")
    two_word_flags+=("--log-flush-frequency")
    flags+=("--logtostderr")
    flags+=("--match-server-version")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__k_get_resource_namespace")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__k_get_resource_namespace")
    flags+=("--password=")
    two_word_flags+=("--password")
    flags+=("--profile=")
    two_word_flags+=("--profile")
    flags+=("--profile-output=")
    two_word_flags+=("--profile-output")
    flags+=("--request-timeout=")
    two_word_flags+=("--request-timeout")
    flags+=("--server=")
    two_word_flags+=("--server")
    two_word_flags+=("-s")
    flags+=("--skip-headers")
    flags+=("--skip-log-headers")
    flags+=("--stderrthreshold=")
    two_word_flags+=("--stderrthreshold")
    flags+=("--tls-server-name=")
    two_word_flags+=("--tls-server-name")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--user=")
    two_word_flags+=("--user")
    flags_with_completion+=("--user")
    flags_completion+=("__k_config_get_users")
    flags+=("--username=")
    two_word_flags+=("--username")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")
    flags+=("--vmodule=")
    two_word_flags+=("--vmodule")
    flags+=("--warnings-as-errors")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

# re-declare __k_handle_word to add kspace characters
__k_handle_word()
{
    # Override this part because we need to handle kspace options
    local kspace_words=( @ : + )
    for char in @ : +; do
        if [[ ${words[c]} = $char* ]]; then
            __k_handle_kspace
            return
        fi
    done
    # continue regular kubectl argument parsing
    if [[ $c -ge $cword ]]; then
        __k_handle_reply
        return
    fi
    __k_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __k_handle_flag
    elif __k_contains_word "${words[c]}" "${commands[@]}"; then
        __k_handle_command
    elif [[ $c -eq 0 ]]; then
        __k_handle_command
    elif __k_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __k_handle_command
        else
            __k_handle_noun
        fi
    else
        __k_handle_noun
    fi
    __k_handle_word
}
